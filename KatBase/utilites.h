#pragma once

enum TitleId : std::uintptr_t
{
	BOOT_UP = 0x00000000,
	DASHBOARD = 0xFFFE07D1,
	FREESTYLEDASH = 0xF5D20000,
	COD_CLASSIC = 0x584109CA,
	COD_WORLD_AT_WAR = 0x4156081C,
	COD_MODERN_WARFARE = 0x415607E6,
	COD_MODERN_WARFARE_2 = 0x41560817,
	COD_MODERN_WARFARE_3 = 0x415608CB,
	COD_BLACK_OPS_1 = 0x41560855,
	COD_BLACK_OPS_2 = 0x415608C3,
	COD_BLACK_OPS_3 = 0x4156091D,
	COD_GHOSTS = 0x415608FC,
	COD_ADVANCED_WARFARE = 0x41560914,
	CSGO = 0x5841125A,
	DESTINY = 0x415608F8,
	GTAV = 0x545408A7
};

enum XNOTIFYQUEUEUI_TYPE
{
	XNOTIFYUI_TYPE_FRIENDONLINE = 0,
	XNOTIFYUI_TYPE_GAMEINVITE = 1,
	XNOTIFYUI_TYPE_FRIENDREQUEST = 2,
	XNOTIFYUI_TYPE_GENERIC = 3, // mail icon
	XNOTIFYUI_TYPE_MULTIPENDING = 4,
	XNOTIFYUI_TYPE_PERSONALMESSAGE = 5,
	XNOTIFYUI_TYPE_SIGNEDOUT = 6,
	XNOTIFYUI_TYPE_SIGNEDIN = 7,
	XNOTIFYUI_TYPE_SIGNEDINLIVE = 8,
	XNOTIFYUI_TYPE_SIGNEDINNEEDPASS = 9,
	XNOTIFYUI_TYPE_CHATREQUEST = 10,
	XNOTIFYUI_TYPE_CONNECTIONLOST = 11,
	XNOTIFYUI_TYPE_DOWNLOADCOMPLETE = 12,
	XNOTIFYUI_TYPE_SONGPLAYING = 13, // music icon
	XNOTIFYUI_TYPE_PREFERRED_REVIEW = 14, // happy face icon
	XNOTIFYUI_TYPE_AVOID_REVIEW = 15, // sad face icon
	XNOTIFYUI_TYPE_COMPLAINT = 16, // hammer icon
	XNOTIFYUI_TYPE_CHATCALLBACK = 17,
	XNOTIFYUI_TYPE_REMOVEDMU = 18,
	XNOTIFYUI_TYPE_REMOVEDGAMEPAD = 19,
	XNOTIFYUI_TYPE_CHATJOIN = 20,
	XNOTIFYUI_TYPE_CHATLEAVE = 21,
	XNOTIFYUI_TYPE_GAMEINVITESENT = 22,
	XNOTIFYUI_TYPE_CANCELPERSISTENT = 23,
	XNOTIFYUI_TYPE_CHATCALLBACKSENT = 24,
	XNOTIFYUI_TYPE_MULTIFRIENDONLINE = 25,
	XNOTIFYUI_TYPE_ONEFRIENDONLINE = 26,
	XNOTIFYUI_TYPE_ACHIEVEMENT = 27,
	XNOTIFYUI_TYPE_HYBRIDDISC = 28,
	XNOTIFYUI_TYPE_MAILBOX = 29, // mailbox icon
	XNOTIFYUI_TYPE_VIDEOCHATINVITE = 30,
	XNOTIFYUI_TYPE_DOWNLOADCOMPLETEDREADYTOPLAY = 31,
	XNOTIFYUI_TYPE_CANNOTDOWNLOAD = 32,
	XNOTIFYUI_TYPE_DOWNLOADSTOPPED = 33,
	XNOTIFYUI_TYPE_CONSOLEMESSAGE = 34,
	XNOTIFYUI_TYPE_GAMEMESSAGE = 35,
	XNOTIFYUI_TYPE_DEVICEFULL = 36,
	XNOTIFYUI_TYPE_CHATMESSAGE = 38,
	XNOTIFYUI_TYPE_MULTIACHIEVEMENTS = 39,
	XNOTIFYUI_TYPE_NUDGE = 40,
	XNOTIFYUI_TYPE_MESSENGERCONNECTIONLOST = 41,
	XNOTIFYUI_TYPE_MESSENGERSIGNINFAILED = 43,
	XNOTIFYUI_TYPE_MESSENGERCONVERSATIONMISSED = 44,
	XNOTIFYUI_TYPE_FAMILYTIMERREMAINING = 45,
	XNOTIFYUI_TYPE_CONNECTIONLOSTRECONNECT = 46,
	XNOTIFYUI_TYPE_EXCESSIVEPLAYTIME = 47,
	XNOTIFYUI_TYPE_PARTYJOINREQUEST = 49,
	XNOTIFYUI_TYPE_PARTYINVITESENT = 50,
	XNOTIFYUI_TYPE_PARTYGAMEINVITESENT = 51,
	XNOTIFYUI_TYPE_PARTYKICKED = 52,
	XNOTIFYUI_TYPE_PARTYDISCONNECTED = 53,
	XNOTIFYUI_TYPE_PARTYCANNOTCONNECT = 56,
	XNOTIFYUI_TYPE_PARTYSOMEONEJOINED = 57,
	XNOTIFYUI_TYPE_PARTYSOMEONELEFT = 58,
	XNOTIFYUI_TYPE_GAMERPICTUREUNLOCKED = 59,
	XNOTIFYUI_TYPE_AVATARAWARDUNLOCKED = 60,
	XNOTIFYUI_TYPE_PARTYJOINED = 61,
	XNOTIFYUI_TYPE_REMOVEDUSB = 62,
	XNOTIFYUI_TYPE_PLAYERMUTED = 63,
	XNOTIFYUI_TYPE_PLAYERUNMUTED = 64,
	XNOTIFYUI_TYPE_CHATMESSAGE2 = 65,
	XNOTIFYUI_TYPE_KINECTCONNECTED = 66,
	XNOTIFYUI_TYPE_KINECTBREAK = 67,
	XNOTIFYUI_TYPE_ETHERNET = 68,
	XNOTIFYUI_TYPE_KINECTPLAYERRECOGNIZED = 69,
	XNOTIFYUI_TYPE_CONSOLESHUTTINGDOWNSOONALERT = 70,
	XNOTIFYUI_TYPE_PROFILESIGNEDINELSEWHERE = 71,
	XNOTIFYUI_TYPE_LASTSIGNINELSEWHERE = 73,
	XNOTIFYUI_TYPE_KINECTDEVICEUNSUPPORTED = 74,
	XNOTIFYUI_TYPE_WIRELESSDEVICETURNOFF = 75,
	XNOTIFYUI_TYPE_UPDATING = 76,
	XNOTIFYUI_TYPE_SMARTGLASSAVAILABLE = 77
};

typedef void(*XNotifyQueueUI_t)(std::uintptr_t type, std::uintptr_t userIndex, std::uintptr_t priority, LPCWSTR string, std::uint64_t param);
typedef std::uintptr_t(*XamGetCurrentTitleId_t)(void);

extern XNotifyQueueUI_t XNotifyQueueUI;
extern XamGetCurrentTitleId_t XamGetCurrentTitleId;

std::uint32_t ResolveImport(const char* importName, std::int32_t index);
void XNotify(const char* text, XNOTIFYQUEUEUI_TYPE icon = XNOTIFYUI_TYPE_PREFERRED_REVIEW);

char* va(const char* fmt, ...);
char* concat(const char* text, ...);

void WriteMemory(std::uint32_t Address, BYTE Data[], std::int32_t size);
BYTE* ReadMemory(std::uint32_t Address, std::int32_t size);

extern XINPUT_STATE Buttons;
bool KeyIsDown(XINPUT_STATE xState, short button);

typedef QWORD(*StubCallback)(...);

class MinHook_t
{
	unsigned long* address,
		* saveStub,
		destination,
		originalStub[4];

public:
	MinHook_t() {};
	MinHook_t(unsigned long address, unsigned long destination, bool stub);

	void Start();
	void Stop();
	void Clean();
	StubCallback Stub;
};

extern MinHook_t MinHook[10];


void StopHooks();
void CleanHooks();
void StartHooks();

